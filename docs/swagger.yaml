basePath: /v1
definitions:
  main.CreateCommentPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      post_id:
        type: integer
    required:
    - content
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 100
        type: string
      password:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 100
        type: string
      password:
        maxLength: 100
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UserWithToken:
    properties:
      _:
        $ref: '#/definitions/store.Password'
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      token:
        type: string
      username:
        type: string
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Password:
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.PostWithMetadata:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      comments_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.User:
    properties:
      _:
        $ref: '#/definitions/store.Password'
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Docs for Social APIs.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Social
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password and generates a JWT
        token
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "201":
          description: JWT token generated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Generates a token for a user
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided credentials
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /comments:
    post:
      consumes:
      - application/json
      description: Creates a comment for a specific post
      parameters:
      - description: Comment payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateCommentPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Comment'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a comment
      tags:
      - comments
  /health:
    get:
      description: Returns the health status of the application
      produces:
      - application/json
      responses:
        "200":
          description: Health status
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Healthcheck
      tags:
      - ops
  /posts:
    post:
      consumes:
      - application/json
      description: Creates a new post with the given details
      parameters:
      - description: Post Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/store.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Post deleted successfully
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Fetches a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetch a post
      tags:
      - posts
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{id}/follow:
    put:
      consumes:
      - application/json
      description: Follow a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follow a user
      tags:
      - users
  /users/{id}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - users
  /users/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activate a user by ID
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activate a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches the user feed with optional filters and pagination
      parameters:
      - description: Fetch posts since this timestamp (ISO 8601 format)
        in: query
        name: since
        type: string
      - description: Fetch posts until this timestamp (ISO 8601 format)
        in: query
        name: until
        type: string
      - description: 'Maximum number of posts to fetch (default: 20)'
        in: query
        name: limit
        type: integer
      - description: Number of posts to skip before starting to fetch
        in: query
        name: offset
        type: integer
      - description: Sort order (e.g., 'asc' or 'desc')
        in: query
        name: sort
        type: string
      - description: Comma-separated list of tags to filter posts
        in: query
        name: tags
        type: string
      - description: Search term to filter posts by content
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of posts with metadata
          schema:
            items:
              $ref: '#/definitions/store.PostWithMetadata'
            type: array
        "400":
          description: Bad request
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the user feed
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
